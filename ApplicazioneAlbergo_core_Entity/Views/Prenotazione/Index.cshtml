@model IEnumerable<ApplicazioneAlbergo_core_Entity.Models.Prenotazione>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.DataInizioPrenotazione)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DataFinePrenotazione)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Acconto)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Cliente)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Camera)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Servizio)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Pensione)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.DataInizioPrenotazione)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DataFinePrenotazione)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Acconto)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Cliente.Nome)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Camera.TipoCamera)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Servizio.DescrizioneServizio)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Pensione.TipoPensione)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.IdPrenotazione">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.IdPrenotazione">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.IdPrenotazione">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>


    <div class="row">
        <div class="col-6">
            <div>
                <button class="btn btn-primary" id="getFetch">Prenotazioni All Inclusive</button>
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-12">
            <table id="myTable" class="table table-striped">
                <thead>
                    <tr>

                        <th scope="col">IdPrenotazione</th>
                        <th scope="col">DataInizioPrenotazione</th>
                        <th scope="col">DataFinePrenotazione</th>
                        <th scope="col">Acconto</th>
                        <th scope="col">TipoPensione</th>
                    </tr>
                </thead>

            <tbody id="mytbody">
                 
            </tbody>
              
            </table>
        </div>
    </div>



@section Scripts {
    <script>
         let data = [];
        const tbody = document.getElementById("mytbody")
        tbody.innerHTML = "";

        const Myfetch = (nameAction) => {
            const options = {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    /*  Authorization: `Bearer ${TokenCommenti} `, */
                },
            };


            fetch(`Prenotazione/${nameAction}`, options)
                .then((response) => {
                    if (!response.ok) {
                        if (response.status > 400 && response.status < 500) {
                            if (response.status === 429) {
                                throw new Error("429 INFAME PER TE TANTE COSE BRUTTE");
                            } else {
                                throw new Error("STAI CAPPELLANDO , RIGUARDA QUELLO CHE HAI SCRITTO");
                            }
                        }
                        if (response.status > 500 && response.status < 600) {
                            throw new Error("SERVER SPOMPATO, NON FUNZIA??");
                        }
                    }
                    return response.json();
                })
                .then((data) => {

                    for (let i = 0; i< data.length; i++) {
						let objDato = data[i];
                        let tr = document.createElement('tr');
                        tbody.appendChild(tr);

                        let td0 = document.createElement('td');
                        let td1 = document.createElement('td');
                        let td2 = document.createElement('td');
                        let td3 = document.createElement('td');
                        let td4 = document.createElement('td');
                        td0.textContent = objDato.idPrenotazione;
                        td1.textContent = objDato.dataInizioPrenotazione;
                        td2.textContent = objDato.dataFinePrenotazione;
                        td3.textContent = objDato.acconto;
                        td4.textContent = objDato.tipoPensione;
                        tr.appendChild(td0);
                        tr.appendChild(td1);
                        tr.appendChild(td2);
                        tr.appendChild(td3);
                        tr.appendChild(td4);                      
					}              

                })
                .catch((error) => {
                    console.error('Errore:', error);               
        })
        }



        document.addEventListener('DOMContentLoaded', () => {

            const bottonefetch = document.getElementById('getFetch');
            bottonefetch.addEventListener('click', () => { Myfetch("FetchTuttePrenotaz_PensCompleta") });

        })
    </script>
}